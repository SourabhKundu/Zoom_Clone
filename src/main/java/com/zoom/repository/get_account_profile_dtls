WITH
  /* 1) bind parameters */
  params AS (
    SELECT
      CAST(:p_ac_sk     AS NUMBER) AS ac_sk,
      CAST(:p_cust_sk   AS NUMBER) AS cust_sk,
      CAST(:p_user_sk   AS NUMBER) AS user_sk,
      CAST(:p_as_of_date AS DATE)   AS as_of_date
  ),

  /* 2) decoder‐account check */
  decoder_flag AS (
    SELECT
      ac_sk,
      CASE WHEN EXISTS (
        SELECT 1
          FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_decoder_xref
         WHERE decoder_ac_sk = params.ac_sk
      ) THEN TRUE ELSE FALSE END AS is_decoder
    FROM params
  ),

  /* 3) basic account metadata */
  account_info AS (
    SELECT
      a.ac_sk,
      dt.ac_type_grp_dcde,
      dt.dtl_ac_type,
      a.cm_data_src_id,
      a.cm_ac_id
    FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_account a
    JOIN DEV_ANCHOR_ANALYTICS.WP_SRC.npf_dtl_ac_type dt
      ON a.dtl_ac_type = dt.dtl_ac_type
    WHERE a.ac_sk = (SELECT ac_sk FROM params)
  ),

  /* 4) SSN logic (INLINE getAccountSSN) */
  ssn_info AS (
    SELECT
      CASE
        WHEN ai.ac_type_grp_dcde NOT IN ('PTR','MAG') THEN (
          /* 1) pull raw I_TX from base tables */
          WITH raw_tx AS (
            SELECT ac.ACCOUNT_LEGAL_IDENTIFIER AS base_tx
              FROM NPFDBO.npf_mds_account_load ac
              JOIN NPFDBO.npf_mds_load_act_part k
                ON ac.n_mds_db = k.active_partition
              JOIN NPFDBO.npf_mds_nrn_acc_src_sys_map sys_map
                ON ac.source_system_type = sys_map.mds_src_sys
               AND (
                    sys_map.mds_prod_line = ac.product_line
                 OR (sys_map.mds_prod_line IS NULL AND ac.product_line IS NULL)
               )
             WHERE ac.account_status_type_value <> 'Purged'
               AND sys_map.nrn_src_sys = ai.cm_data_src_id
               AND ac.CONTRACT_ID      = ai.cm_ac_id
          ),
          /* 2) strip leading + or - */
          cleaned AS (
            SELECT
              CASE
                WHEN LEFT(base_tx,1) = '-' THEN REPLACE(base_tx,'-')
                ELSE REPLACE(base_tx,'+')
              END AS no_sign
            FROM raw_tx
          ),
          /* 3) for Metavante, drop first two chars */
          final_ssn AS (
            SELECT
              CASE
                WHEN ai.cm_data_src_id IN (
                  SELECT DISTINCT cm_data_src_id
                    FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_account
                   WHERE data_src_id IN (5,10)
                     AND cm_data_src_id IS NOT NULL
                ) THEN SUBSTR(no_sign,3)
                ELSE no_sign
              END AS i_tx
            FROM cleaned
          )
          SELECT i_tx FROM final_ssn
        )
        ELSE ''
      END AS i_tx
    FROM account_info ai
  ),

  /* 5) INLINE getAccountDsclmr */
  dsclmr_base AS (
    SELECT dtl.dtl_ac_type,
           dclmr.dsclmr_desc AS v_dsclmr_desc
      FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_dtl_ac_type dtl
      JOIN DEV_ANCHOR_ANALYTICS.WP_SRC.npf_dsclmr dclmr
        ON dtl.dsclmr_code = dclmr.dsclmr_code
  ),

  /* 6) INLINE getAccountNLDsclmr */
  nl_deposit_counts AS (
    SELECT COUNT(*)     AS v_rec_count,
           MIN(deposit_id) AS min_dep
      FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_ac_deposit
     WHERE ac_sk = (SELECT ac_sk FROM params)
  ),
  nl_counter AS (
    SELECT CASE WHEN v_rec_count > 0 THEN (
              SELECT COUNT(*) 
                FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_ac_deposit
               WHERE ac_sk     = (SELECT ac_sk FROM params)
                 AND deposit_id = nd.min_dep
                 AND (
                      (pra_cr_lim_amt <> 0 AND pra_cr_lim_amt IS NOT NULL)
                   OR (pra_used_amt   <> 0 AND pra_used_amt   IS NOT NULL)
                   OR (pra_avail_amt  <> 0 AND pra_avail_amt  IS NOT NULL)
                 )
            ) ELSE 0 END AS v_counter
      FROM nl_deposit_counts nd
  ),
  decode_nl AS (
    SELECT dcde_desc AS v_dcde_dsclmr_desc
      FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_decode
     WHERE dcde_type = 'NORTHERNLINE'
       AND dcde_code = '635'
  ),

  /* 7) disclaimer logic */
  disclaimer_info AS (
    SELECT CASE
      WHEN ai.ac_type_grp_dcde IN ('ACK','CHK','ICK','SAV') THEN
        CASE
          WHEN ai.dtl_ac_type = 'SAV' THEN db.v_dsclmr_desc
          ELSE
            CASE
              WHEN nl_counter.v_counter > 0
               AND db.v_dsclmr_desc        IS NOT NULL
               AND decode_nl.v_dcde_dsclmr_desc IS NOT NULL
              THEN CONCAT(db.v_dsclmr_desc, '<BR><BR>', decode_nl.v_dcde_dsclmr_desc)
              ELSE CONCAT(
                     COALESCE(db.v_dsclmr_desc, ''),
                     COALESCE(decode_nl.v_dcde_dsclmr_desc, '')
                   )
            END
        END
      ELSE db.v_dsclmr_desc
    END AS dsclmr_desc
    FROM account_info ai
    LEFT JOIN dsclmr_base   db ON db.dtl_ac_type = ai.dtl_ac_type
    CROSS JOIN nl_counter
    CROSS JOIN decode_nl
  ),

  /* 8) raw load-date and max-valuation-date */
  load_dates AS (
    SELECT CAST(DATA_LOAD_DATE AS DATE) AS npf_data_load_date
      FROM DEV_ANCHOR_ANALYTICS.WP_SRC.NPF_DATA_LOAD_DATE
  ),
  max_valn_base AS (
    SELECT COALESCE(
             MAX(valn_as_of_date),
             (SELECT npf_data_load_date FROM load_dates)
           ) AS v_data_load_date
      FROM DEV_ANCHOR_ANALYTICS.WP_SRC.NPF_AC_POSN_SUM
     WHERE ac_sk = (SELECT ac_sk FROM params)
       AND valn_as_of_date >= (SELECT npf_data_load_date FROM load_dates)
  ),

  /* 9) Monday “back-off” logic */
  comp_dates AS (
    SELECT vb.v_data_load_date,
           CASE
             WHEN ai.cm_data_src_id NOT IN (8)
              AND TO_CHAR(vb.v_data_load_date,'DAY') LIKE 'MONDAY%'
              AND (SELECT npf_data_load_date FROM load_dates) < vb.v_data_load_date
             THEN (
               SELECT MAX(valn_as_of_date)
                 FROM DEV_ANCHOR_ANALYTICS.WP_SRC.NPF_AC_POSN_SUM
                WHERE ac_sk = (SELECT ac_sk FROM params)
                  AND valn_as_of_date <= vb.v_data_load_date
             )
             ELSE vb.v_data_load_date
           END AS begin_date_c
      FROM max_valn_base vb
      CROSS JOIN account_info ai
  ),

  /* 10) freq/run_time + final max_valn_date */
  valn_info AS (
    SELECT cd.begin_date_c,
           vs.valn_freq_dcde,
           vs.valn_run_time   AS begin_run_time,
           vs.valn_run_time   AS end_run_time,
           vs.valn_as_of_date AS max_valn_date
      FROM comp_dates cd
      LEFT JOIN LATERAL (
        SELECT valn_freq_dcde, valn_run_time, valn_as_of_date
          FROM DEV_ANCHOR_ANALYTICS.WP_SRC.NPF_AC_POSN_SUM
         WHERE ac_sk = (SELECT ac_sk FROM params)
           AND valn_as_of_date = cd.begin_date_c
         LIMIT 1
      ) vs ON TRUE
  ),

  /* 11) assemble all top-level fields */
  final_dates AS (
    SELECT p.ac_sk,
           p.cust_sk,
           p.user_sk,
           ai.ac_type_grp_dcde,
           ssn.i_tx,
           disp.dsclmr_desc,
           TO_CHAR(
             COALESCE(p.as_of_date, vd.begin_date_c),
             'YYYY-MM-DD'
           ) AS begin_date_c,
           vd.max_valn_date,
           CASE WHEN vd.max_valn_date IS NULL THEN 1 ELSE 0 END AS display_zero_valn,
           vd.valn_freq_dcde,
           vd.begin_run_time,
           vd.end_run_time
      FROM params       p
      CROSS JOIN account_info    ai
      CROSS JOIN ssn_info        ssn
      CROSS JOIN disclaimer_info disp
      CROSS JOIN valn_info       vd
      CROSS JOIN decoder_flag    df
  ),

  /* 12) balances cursor with all but getNonBankingBalsDcde inlined */
  balances AS (
    SELECT *
      FROM final_dates fd,
           LATERAL TABLE(
             CASE
               WHEN df.is_decoder THEN
                 npf_acct_prfl_pkg.getNonBankingBalsDcde(
                   fd.ac_sk, fd.cust_sk, fd.ac_type_grp_dcde,
                   fd.i_tx, fd.dsclmr_desc, fd.display_zero_valn
                 )

               /* –– Banking Deposit Balances –– */
               WHEN fd.ac_type_grp_dcde IN ('ACK','CD','CHK','ICK','SAV') THEN
                 (
                   WITH bd_rec AS (
                     SELECT COUNT(*) AS v_rec_count
                       FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_ac_deposit
                      WHERE ac_sk = fd.ac_sk
                        AND valn_as_of_date BETWEEN fd.max_valn_date AND fd.begin_date_c
                   ),
                   bd_types AS (
                     SELECT dtl.ac_type_grp_dcde, dtl.dtl_ac_type
                       FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_account ac
                       JOIN DEV_ANCHOR_ANALYTICS.WP_SRC.npf_dtl_ac_type dtl
                         ON ac.dtl_ac_type = dtl.dtl_ac_type
                      WHERE ac.ac_sk = fd.ac_sk
                   )
                   SELECT
                     dep.ac_sk,
                     dep.deposit_id,
                     dep.mv_bse_amt,
                     dep.cur_ldgr_bal_amt,
                     dep.cur_avail_bal_amt,
                     dep.close_ldgr_bal_amt,
                     dep.pra_avail_amt,
                     dep.pra_used_amt,
                     dep.pra_cr_lim_amt,
                     dep.cur_rt_amt,
                     dep.apy_rt_amt,
                     dep.apy_rt_lst_per_amt,
                     dep.int_pd_ytd_amt,
                     dep.txw_ytd_amt,
                     dep.cur_ldgr_bal_inv_amt,
                     dep.cur_avail_bal_inv_amt,
                     dep.close_ldgr_bal_inv_amt,
                     dep.cur_ldgr_bal_comb_amt,
                     dep.cur_avail_bal_comb_amt,
                     dep.close_ldgr_bal_comb_amt,
                     npf_util_pkg.get_dcde_desc('TERMCD',dep.term_cd_dcde) AS term_cd_dcde,
                     dep.term_cd_qty_nbr,
                     dep.matur_cde_date,
                     dep.lst_int_pmt_amt,
                     dep.cd_int_pmt_meth_dcde,
                     dep.creat_by,
                     dep.creat_tm,
                     dep.upd_by,
                     dep.upd_tm,
                     dep.valn_as_of_date,
                     bt.ac_type_grp_dcde,
                     bt.dtl_ac_type
                   FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_ac_deposit dep
                   CROSS JOIN bd_types bt
                   WHERE dep.ac_sk = fd.ac_sk
                     AND dep.valn_as_of_date BETWEEN fd.max_valn_date AND fd.begin_date_c

                   UNION ALL

                   SELECT
                     fd.ac_sk,
                     NULL     AS deposit_id,
                     0        AS mv_bse_amt,
                     0        AS cur_ldgr_bal_amt,
                     0        AS cur_avail_bal_amt,
                     0        AS close_ldgr_bal_amt,
                     0        AS pra_avail_amt,
                     0        AS pra_used_amt,
                     0        AS pra_cr_lim_amt,
                     0        AS cur_rt_amt,
                     0        AS apy_rt_amt,
                     0        AS apy_rt_lst_per_amt,
                     0        AS int_pd_ytd_amt,
                     0        AS txw_ytd_amt,
                     0        AS cur_ldgr_bal_inv_amt,
                     0        AS cur_avail_bal_inv_amt,
                     0        AS close_ldgr_bal_inv_amt,
                     0        AS cur_ldgr_bal_comb_amt,
                     0        AS cur_avail_bal_comb_amt,
                     0        AS close_ldgr_bal_comb_amt,
                     NULL     AS term_cd_dcde,
                     NULL     AS term_cd_qty_nbr,
                     NULL     AS matur_cde_date,
                     0        AS lst_int_pmt_amt,
                     NULL     AS cd_int_pmt_meth_dcde,
                     NULL     AS creat_by,
                     NULL     AS creat_tm,
                     NULL     AS upd_by,
                     NULL     AS upd_tm,
                     fd.begin_date_c AS valn_as_of_date,
                     bt.ac_type_grp_dcde,
                     bt.dtl_ac_type
                   FROM bd_rec
                   CROSS JOIN bd_types bt
                   WHERE bd_rec.v_rec_count = 0
                 )

               /* –– Non-Banking Balances –– */
               WHEN fd.ac_type_grp_dcde IN ('BRK','IMA','ITR','MMD','RTR','SEC') THEN
                 (
                   WITH nb_rec AS (
                     SELECT COUNT(*) AS v_rec_count
                       FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_ac_posn_sum sum
                      WHERE sum.ac_sk = fd.ac_sk
                        AND sum.valn_as_of_date = fd.max_valn_date
                   ),
                   nb_types AS (
                     SELECT dtl.ac_type_grp_dcde, dtl.dtl_ac_type
                       FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_account ac
                       JOIN DEV_ANCHOR_ANALYTICS.WP_SRC.npf_dtl_ac_type dtl
                         ON ac.dtl_ac_type = dtl.dtl_ac_type
                      WHERE ac.ac_sk = fd.ac_sk
                   )
                   SELECT
                     sum.ac_sk,
                     sum.valn_as_of_date,
                     sum.valn_freq_dcde,
                     sum.valn_run_time,
                     sum.ac_accr_inc_bse_amt,
                     sum.ac_accr_exp_bse_amt,
                     sum.ac_mv_bse_amt,
                     sum.ac_bas_bse_amt,
                     CASE
                       WHEN sum.ac_bas_bse_amt IS NULL
                         OR sum.ac_verif_ind_flag = pg_flag_N_c
                       THEN pg_flag_Y_c ELSE pg_flag_N_c
                     END AS null_cost_flag,
                     sum.valn_appr_flag,
                     sum.ac_prin_cash_amt,
                     sum.ac_inc_cash_amt,
                     sum.ac_resv_cash_amt,
                     sum.ac_pend_cash_amt,
                     sum.creat_by,
                     sum.creat_tm,
                     sum.upd_by,
                     sum.upd_tm,
                     nt.ac_type_grp_dcde,
                     nt.dtl_ac_type
                   FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_ac_posn_sum sum
                   CROSS JOIN nb_types nt
                   WHERE sum.ac_sk = fd.ac_sk
                     AND sum.valn_as_of_date = fd.max_valn_date

                   UNION ALL

                   SELECT
                     fd.ac_sk                AS ac_sk,
                     fd.begin_date_c         AS valn_as_of_date,
                     NULL                    AS valn_freq_dcde,
                     NULL                    AS valn_run_time,
                     0                       AS ac_accr_inc_bse_amt,
                     0                       AS ac_accr_exp_bse_amt,
                     0                       AS ac_mv_bse_amt,
                     0                       AS ac_bas_bse_amt,
                     pg_flag_Y_c             AS null_cost_flag,
                     NULL                    AS valn_appr_flag,
                     0                       AS ac_prin_cash_amt,
                     0                       AS ac_inc_cash_amt,
                     0                       AS ac_resv_cash_amt,
                     0                       AS ac_pend_cash_amt,
                     NULL                    AS creat_by,
                     NULL                    AS creat_tm,
                     NULL                    AS upd_by,
                     NULL                    AS upd_tm,
                     nt.ac_type_grp_dcde,
                     nt.dtl_ac_type
                   FROM nb_rec
                   CROSS JOIN nb_types nt
                   WHERE nb_rec.v_rec_count = 0
                 )

               /* –– Banking Loan Balances –– */
               WHEN fd.ac_type_grp_dcde IN ('ECL','INL','MOL','CCL','CCM') THEN
                 (
                   WITH ln_rec AS (
                     SELECT COUNT(*) AS v_rec_count
                       FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_ac_loan l
                      WHERE l.ac_sk = fd.ac_sk
                        AND l.loan_ac_num_id IN (
                              SELECT DISTINCT loan_ac_num_id
                                FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_ac_loan
                               WHERE ac_sk = fd.ac_sk
                            )
                        AND l.loan_num_id IN (
                              SELECT DISTINCT loan_num_id
                                FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_ac_loan
                               WHERE ac_sk = fd.ac_sk
                                 AND loan_ac_num_id = l.loan_ac_num_id
                            )
                        AND l.valn_as_of_date = fd.max_valn_date
                   ),
                   ln_types AS (
                     SELECT dtl.ac_type_grp_dcde, dtl.dtl_ac_type
                       FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_account ac
                       JOIN DEV_ANCHOR_ANALYTICS.WP_SRC.npf_dtl_ac_type dtl
                         ON ac.dtl_ac_type = dtl.dtl_ac_type
                      WHERE ac.ac_sk = fd.ac_sk
                   )
                   SELECT
                     l.ac_sk,
                     l.valn_as_of_date,
                     NULL        AS valn_freq_dcde,
                     NULL        AS valn_run_time,
                     0           AS not_pd_amt,
                     0           AS int_accr_amt,
                     NULL        AS reprice_date,
                     NULL        AS commt_exp_date,
                     0           AS liab_amt,
                     NULL        AS matur_date,
                     NULL        AS ltr_cr_obligee,
                     lt.ac_type_grp_dcde,
                     lt.dtl_ac_type
                   FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_ac_loan l
                   CROSS JOIN ln_types lt
                   WHERE l.ac_sk = fd.ac_sk
                     AND l.valn_as_of_date = fd.max_valn_date

                   UNION ALL

                   SELECT
                     fd.ac_sk            AS ac_sk,
                     fd.begin_date_c     AS valn_as_of_date,
                     NULL                AS valn_freq_dcde,
                     NULL                AS valn_run_time,
                     0                   AS not_pd_amt,
                     0                   AS int_accr_amt,
                     NULL                AS reprice_date,
                     NULL                AS commt_exp_date,
                     0                   AS liab_amt,
                     NULL                AS matur_date,
                     NULL                AS ltr_cr_obligee,
                     lt.ac_type_grp_dcde,
                     lt.dtl_ac_type
                   FROM ln_rec
                   CROSS JOIN ln_types lt
                   WHERE ln_rec.v_rec_count = 0
                 )

               /* –– Mutual Fund Balances –– */
               WHEN fd.ac_type_grp_dcde = 'MUT' THEN
                 (
                   WITH mf_types AS (
                     SELECT dtl.ac_type_grp_dcde, dtl.dtl_ac_type
                       FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_account ac
                       JOIN DEV_ANCHOR_ANALYTICS.WP_SRC.npf_dtl_ac_type dtl
                         ON ac.dtl_ac_type = dtl.dtl_ac_type
                      WHERE ac.ac_sk = fd.ac_sk
                   )
                   SELECT
                     pos.position_sk,
                     pos.ac_sk,
                     pos.instr_id,
                     pos.valn_as_of_date,
                     pos.valn_run_time,
                     pos.valn_freq_dcde,
                     pos.ldgr_id,
                     pos.cash_dcde,
                     pos.data_src_id,
                     pos.adj_bas_bse_amt,
                     pos.verif_ind_flag  AS null_cost_flag,
                     pos.adj_bas_lcl_amt,
                     pos.mv_bse_amt,
                     pos.creat_by,
                     pos.creat_tm,
                     pos.upd_by,
                     pos.upd_tm,
                     mf_types.ac_type_grp_dcde,
                     mf_types.dtl_ac_type
                   FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_ac_posn_sum pos
                   CROSS JOIN mf_types
                   WHERE pos.ac_sk = fd.ac_sk
                     AND pos.valn_as_of_date = fd.max_valn_date
                     AND pos.valn_freq_dcde = fd.valn_freq_dcde
                     AND pos.valn_run_time   = fd.begin_run_time

                   UNION ALL

                   SELECT
                     NULL             AS position_sk,
                     fd.ac_sk         AS ac_sk,
                     NULL             AS instr_id,
                     fd.begin_date_c  AS valn_as_of_date,
                     NULL             AS valn_run_time,
                     NULL             AS valn_freq_dcde,
                     NULL             AS ldgr_id,
                     NULL             AS cash_dcde,
                     NULL             AS data_src_id,
                     0                AS adj_bas_bse_amt,
                     NULL             AS null_cost_flag,
                     0                AS adj_bas_lcl_amt,
                     0                AS mv_bse_amt,
                     NULL             AS creat_by,
                     NULL             AS creat_tm,
                     NULL             AS upd_by,
                     NULL             AS upd_tm,
                     mf_types.ac_type_grp_dcde,
                     mf_types.dtl_ac_type
                   FROM mf_types
                 )

               /* –– Manual Aggregated Balances –– */
               WHEN fd.ac_type_grp_dcde = 'MAG' THEN
                 (
                   WITH ma_rec AS (
                     SELECT COUNT(*) AS v_rec_count
                       FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_ac_posn_sum sum
                       LEFT JOIN DEV_ANCHOR_ANALYTICS.WP_SRC.npf_ac_aggregation aggr
                         ON sum.ac_sk = aggr.ac_sk
                      WHERE aggr.ac_sk = fd.ac_sk
                        AND sum.valn_as_of_date = fd.max_valn_date
                        AND sum.valn_freq_dcde = fd.valn_freq_dcde
                        AND sum.valn_run_time   = fd.begin_run_time
                   ),
                   ma_types AS (
                     SELECT dtl.ac_type_grp_dcde, dtl.dtl_ac_type
                       FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_account ac
                       JOIN DEV_ANCHOR_ANALYTICS.WP_SRC.npf_dtl_ac_type dtl
                         ON ac.dtl_ac_type = dtl.dtl_ac_type
                      WHERE ac.ac_sk = fd.ac_sk
                   )
                   SELECT
                     sum.ac_sk,
                     sum.valn_as_of_date,
                     sum.valn_freq_dcde,
                     sum.valn_run_time,
                     sum.ac_accr_inc_bse_amt,
                     sum.ac_accr_exp_bse_amt,
                     sum.ac_mv_bse_amt,
                     sum.ac_bas_bse_amt,
                     sum.valn_appr_flag,
                     sum.ac_prin_cash_amt,
                     sum.ac_inc_cash_amt,
                     sum.ac_resv_cash_amt,
                     sum.ac_pend_cash_amt,
                     sum.creat_by,
                     sum.creat_tm,
                     sum.upd_by,
                     sum.upd_tm,
                     ma_types.ac_type_grp_dcde,
                     ma_types.dtl_ac_type
                   FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_ac_posn_sum sum
                   LEFT JOIN DEV_ANCHOR_ANALYTICS.WP_SRC.npf_ac_aggregation aggr
                     ON sum.ac_sk = aggr.ac_sk
                   CROSS JOIN ma_types
                   WHERE sum.ac_sk = fd.ac_sk
                     AND sum.valn_as_of_date = fd.max_valn_date
                     AND sum.valn_freq_dcde = fd.valn_freq_dcde
                     AND sum.valn_run_time   = fd.begin_run_time

                   UNION ALL

                   SELECT
                     fd.ac_sk             AS ac_sk,
                     fd.begin_date_c      AS valn_as_of_date,
                     NULL                 AS valn_freq_dcde,
                     NULL                 AS valn_run_time,
                     0                    AS ac_accr_inc_bse_amt,
                     0                    AS ac_accr_exp_bse_amt,
                     0                    AS ac_mv_bse_amt,
                     0                    AS ac_bas_bse_amt,
                     NULL                 AS valn_appr_flag,
                     0                    AS ac_prin_cash_amt,
                     0                    AS ac_inc_cash_amt,
                     0                    AS ac_resv_cash_amt,
                     0                    AS ac_pend_cash_amt,
                     NULL                 AS creat_by,
                     NULL                 AS creat_tm,
                     NULL                 AS upd_by,
                     NULL                 AS upd_tm,
                     ma_types.ac_type_grp_dcde,
                     ma_types.dtl_ac_type
                   FROM ma_rec
                   CROSS JOIN ma_types
                   WHERE ma_rec.v_rec_count = 0
                 )

               /* –– PTR Account Balances –– */
               WHEN fd.ac_type_grp_dcde = 'PTR' THEN
                 (
                   WITH ptr_rec AS (
                     SELECT COUNT(*) AS v_rec_count
                       FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_ac_posn_sum sum
                       LEFT JOIN DEV_ANCHOR_ANALYTICS.WP_SRC.npf_ac_aggregation aggr
                         ON sum.ac_sk = aggr.ac_sk
                       JOIN DEV_ANCHOR_ANALYTICS.WP_SRC.npf_mstr_prtnr_ac prtnr_ac
                         ON prtnr_ac.ac_sk = fd.ac_sk
                       JOIN DEV_ANCHOR_ANALYTICS.WP_SRC.npf_mstr_prtnr prtnr
                         ON prtnr_ac.prtnr_sk = prtnr.prtnr_sk
                      WHERE aggr.ac_sk = fd.ac_sk
                        AND sum.valn_as_of_date = fd.max_valn_date
                        AND sum.valn_freq_dcde = fd.valn_freq_dcde
                        AND sum.valn_run_time   = fd.begin_run_time
                   ),
                   ptr_types AS (
                     SELECT dtl.ac_type_grp_dcde, dtl.dtl_ac_type
                       FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_account ac
                       JOIN DEV_ANCHOR_ANALYTICS.WP_SRC.npf_dtl_ac_type dtl
                         ON ac.dtl_ac_type = dtl.dtl_ac_type
                      WHERE ac.ac_sk = fd.ac_sk
                   )
                   SELECT
                     prtnr.prtnr_desc,
                     sum.ac_sk,
                     sum.valn_as_of_date,
                     sum.valn_freq_dcde,
                     sum.valn_run_time,
                     sum.ac_accr_inc_bse_amt,
                     sum.ac_accr_exp_bse_amt,
                     sum.ac_mv_bse_amt,
                     sum.ac_bas_bse_amt,
                     sum.valn_appr_flag,
                     sum.ac_prin_cash_amt,
                     sum.ac_inc_cash_amt,
                     sum.ac_resv_cash_amt,
                     sum.ac_pend_cash_amt,
                     sum.creat_by,
                     sum.creat_tm,
                     sum.upd_by,
                     sum.upd_tm,
                     ptr_types.ac_type_grp_dcde,
                     ptr_types.dtl_ac_type
                   FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_ac_posn_sum sum
                   JOIN DEV_ANCHOR_ANALYTICS.WP_SRC.npf_ac_aggregation aggr
                     ON sum.ac_sk = aggr.ac_sk(+)
                   JOIN DEV_ANCHOR_ANALYTICS.WP_SRC.npf_mstr_prtnr_ac prtnr_ac
                     ON prtnr_ac.ac_sk = fd.ac_sk
                   JOIN DEV_ANCHOR_ANALYTICS.WP_SRC.npf_mstr_prtnr prtnr
                     ON prtnr_ac.prtnr_sk = prtnr.prtnr_sk
                   CROSS JOIN ptr_types
                   WHERE sum.ac_sk = fd.ac_sk
                     AND sum.valn_as_of_date = fd.max_valn_date
                     AND sum.valn_freq_dcde = fd.valn_freq_dcde
                     AND sum.valn_run_time   = fd.begin_run_time

                   UNION ALL

                   SELECT
                     (SELECT prtnr.prtnr_desc
                        FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_mstr_prtnr prtnr
                        JOIN DEV_ANCHOR_ANALYTICS.WP_SRC.npf_mstr_prtnr_ac prtnr_ac
                          ON prtnr_ac.prtnr_sk = prtnr.prtnr_sk
                       WHERE prtnr_ac.ac_sk = fd.ac_sk
                     )          AS prtnr_desc,
                     fd.ac_sk   AS ac_sk,
                     fd.begin_date_c AS valn_as_of_date,
                     NULL       AS valn_freq_dcde,
                     NULL       AS valn_run_time,
                     0          AS ac_accr_inc_bse_amt,
                     0          AS ac_accr_exp_bse_amt,
                     0          AS ac_mv_bse_amt,
                     0          AS ac_bas_bse_amt,
                     NULL       AS valn_appr_flag,
                     0          AS ac_prin_cash_amt,
                     0          AS ac_inc_cash_amt,
                     0          AS ac_resv_cash_amt,
                     0          AS ac_pend_cash_amt,
                     NULL       AS creat_by,
                     NULL       AS creat_tm,
                     NULL       AS upd_by,
                     NULL       AS upd_tm,
                     ptr_types.ac_type_grp_dcde,
                     ptr_types.dtl_ac_type
                   FROM ptr_rec
                   CROSS JOIN ptr_types
                   WHERE ptr_rec.v_rec_count = 0
                 )

               /* –– Yodlee-Aggregated Balances –– */
               WHEN fd.ac_type_grp_dcde IN ('YIN','YLN','YRW') THEN
                 (
                   WITH yo_rec AS (
                     SELECT COUNT(*) AS v_rec_count
                       FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_ac_aggregation a
                       LEFT JOIN DEV_ANCHOR_ANALYTICS.WP_SRC.npf_ac_posn_sum b
                         ON a.ac_sk = b.ac_sk
                      WHERE a.ac_sk = fd.ac_sk
                        AND b.valn_as_of_date = fd.max_valn_date
                        AND b.valn_freq_dcde = fd.valn_freq_dcde
                        AND b.valn_run_time   = fd.begin_run_time
                   ),
                   yo_types AS (
                     SELECT dtl.ac_type_grp_dcde, dtl.dtl_ac_type
                       FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_account ac
                       JOIN DEV_ANCHOR_ANALYTICS.WP_SRC.npf_dtl_ac_type dtl
                         ON ac.dtl_ac_type = dtl.dtl_ac_type
                      WHERE ac.ac_sk = fd.ac_sk
                   ),
                   nfa_desc AS (
                     SELECT CASE WHEN is_nfa(fd.ac_sk)
                                 THEN get_nfa_unit_desc(fd.ac_sk)
                                 ELSE NULL END AS rwd_curr_bal_desc
                   )
                   SELECT
                     a.ac_sk,
                     a.lst_valn_date,
                     a.aggr_ast_id,
                     a.ac_commt_amt,
                     a.ac_fund_amt,
                     a.pmt_due_date,
                     a.curr_bal_amt,
                     a.lst_pmt_amt,
                     a.lst_pmt_date,
                     a.avail_cr_amt,
                     a.orig_loan_amt,
                     a.orig_loan_date,
                     nfa_desc.rwd_curr_bal_desc,
                     a.creat_by,
                     a.creat_tm,
                     a.upd_by,
                     a.upd_tm,
                     b.valn_as_of_date,
                     a.apr_rt_amt,
                     ROUND(a.avail_bal_amt,2) AS avail_bal_amt,
                     ROUND(a.payoff_amt,2)    AS payoff_amt,
                     ROUND(b.ac_prin_cash_amt,2) AS ac_prin_cash_amt,
                     yo_types.ac_type_grp_dcde,
                     yo_types.dtl_ac_type
                   FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_ac_aggregation a
                   LEFT JOIN DEV_ANCHOR_ANALYTICS.WP_SRC.npf_ac_posn_sum b
                     ON a.ac_sk = b.ac_sk
                    AND b.valn_as_of_date = fd.max_valn_date
                    AND b.valn_freq_dcde = fd.valn_freq_dcde
                    AND b.valn_run_time   = fd.begin_run_time
                   CROSS JOIN yo_types
                   CROSS JOIN nfa_desc
                   WHERE yo_rec.v_rec_count > 0

                   UNION ALL

                   SELECT
                     fd.ac_sk                  AS ac_sk,
                     NULL                      AS lst_valn_date,
                     NULL                      AS aggr_ast_id,
                     0                         AS ac_commt_amt,
                     0                         AS ac_fund_amt,
                     0                         AS pmt_due_amt,
                     NULL                      AS pmt_due_date,
                     0                         AS curr_bal_amt,
                     0                         AS lst_pmt_amt,
                     NULL                      AS lst_pmt_date,
                     0                         AS avail_cr_amt,
                     0                         AS orig_loan_amt,
                     NULL                      AS orig_loan_date,
                     nfa_desc.rwd_curr_bal_desc,
                     NULL                      AS creat_by,
                     NULL                      AS creat_tm,
                     NULL                      AS upd_by,
                     NULL                      AS upd_tm,
                     fd.begin_date_c           AS valn_as_of_date,
                     0                         AS apr_rt_amt,
                     0                         AS avail_bal_amt,
                     0                         AS payoff_amt,
                     0                         AS ac_prin_cash_amt,
                     yo_types.ac_type_grp_dcde,
                     yo_types.dtl_ac_type
                   FROM yo_rec
                   CROSS JOIN yo_types
                   CROSS JOIN nfa_desc
                   WHERE yo_rec.v_rec_count = 0
                 )

               ELSE
                 /* fallback non–banking balances inline */
                 (
                   WITH fb_rec AS (
                     SELECT COUNT(*) AS v_rec_count
                       FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_ac_posn_sum sum
                      WHERE sum.ac_sk = fd.ac_sk
                        AND sum.valn_as_of_date = fd.max_valn_date
                   ),
                   fb_types AS (
                     SELECT dtl.ac_type_grp_dcde, dtl.dtl_ac_type
                       FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_account ac
                       JOIN DEV_ANCHOR_ANALYTICS.WP_SRC.npf_dtl_ac_type dtl
                         ON ac.dtl_ac_type = dtl.dtl_ac_type
                      WHERE ac.ac_sk = fd.ac_sk
                   )
                   SELECT
                     sum.ac_sk,
                     sum.valn_as_of_date,
                     sum.valn_freq_dcde,
                     sum.valn_run_time,
                     sum.ac_accr_inc_bse_amt,
                     sum.ac_accr_exp_bse_amt,
                     sum.ac_mv_bse_amt,
                     sum.ac_bas_bse_amt,
                     sum.valn_appr_flag,
                     sum.ac_prin_cash_amt,
                     sum.ac_inc_cash_amt,
                     sum.ac_resv_cash_amt,
                     sum.ac_pend_cash_amt,
                     sum.creat_by,
                     sum.creat_tm,
                     sum.upd_by,
                     sum.upd_tm,
                     fb_types.ac_type_grp_dcde,
                     fb_types.dtl_ac_type
                   FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_ac_posn_sum sum
                   CROSS JOIN fb_types
                   WHERE sum.ac_sk = fd.ac_sk
                     AND sum.valn_as_of_date = fd.max_valn_date

                   UNION ALL

                   SELECT
                     fd.ac_sk            AS ac_sk,
                     fd.begin_date_c     AS valn_as_of_date,
                     NULL                AS valn_freq_dcde,
                     NULL                AS valn_run_time,
                     0                   AS ac_accr_inc_bse_amt,
                     0                   AS ac_accr_exp_bse_amt,
                     0                   AS ac_mv_bse_amt,
                     0                   AS ac_bas_bse_amt,
                     NULL                AS valn_appr_flag,
                     0                   AS ac_prin_cash_amt,
                     0                   AS ac_inc_cash_amt,
                     0                   AS ac_resv_cash_amt,
                     0                   AS ac_pend_cash_amt,
                     NULL                AS creat_by,
                     NULL                AS creat_tm,
                     NULL                AS upd_by,
                     NULL                AS upd_tm,
                     fb_types.ac_type_grp_dcde,
                     fb_types.dtl_ac_type
                   FROM fb_rec
                   CROSS JOIN fb_types
                   WHERE fb_rec.v_rec_count = 0
                 )
             END
           ) AS cur_out
  ),

  /* 13) inlined get_account_dtls logic */
  dt_dec AS (
    SELECT
      cmpnt_ac_sk,
      decoder_ac_sk,
      decoder_ac_id
    FROM (
      SELECT
        cmpnt_ac_sk,
        decoder_ac_sk,
        decoder_ac_id,
        ROW_NUMBER() OVER (ORDER BY cmpnt_data_src_id, creat_tm) AS rn
      FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_decoder_xref
      WHERE decoder_ac_sk = (SELECT ac_sk FROM params)
    ) t
    WHERE rn = 1
  ),
  dt_base_ac AS (
    SELECT
      COALESCE(cmpnt_ac_sk, (SELECT ac_sk FROM params)) AS base_ac_sk,
      decoder_ac_sk,
      decoder_ac_id
    FROM dt_dec
  ),
  dt_lnkd_ac_info AS (
    SELECT
      b.ac_sk,
      a.ac_id   AS lnkd_ac_id,
      a.ac_desc AS lnkd_ac_desc,
      b.lnkd_ac_sk
    FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_mstr_prtnr_ac b
    JOIN DEV_ANCHOR_ANALYTICS.WP_SRC.npf_account      a
      ON a.ac_sk = b.lnkd_ac_sk
  ),
  dt_lnkd_ast_info AS (
    SELECT
      a.ac_sk,
      b.ast_short_desc,
      b.ast_long_desc,
      b.tnt_sec_id,
      b.iss_type,
      b.man_aggr_ast_id,
      b.vintage_yr,
      a.instr_id
    FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_mstr_prtnr_ac a
    JOIN DEV_ANCHOR_ANALYTICS.WP_SRC.npf_asset         b
      ON a.instr_id = b.instr_id
  ),
  dt_special_data_sources AS (
    SELECT DISTINCT cm_data_src_id
      FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_account
     WHERE data_src_id IN (5,10)
       AND cm_data_src_id IS NOT NULL
  ),
  dt_tx_id_prep AS (
    SELECT
      sys_map.nrn_src_sys   AS i_src_sys,
      ac_mds.CONTRACT_ID    AS i_nrn_ac,
      CASE 
        WHEN LEFT(ac_mds.ACCOUNT_LEGAL_IDENTIFIER,1) IN ('-','+') 
        THEN SUBSTR(ac_mds.ACCOUNT_LEGAL_IDENTIFIER,2)
        ELSE ac_mds.ACCOUNT_LEGAL_IDENTIFIER
      END                   AS cleaned_tx,
      CASE WHEN sys_map.nrn_src_sys IN (
             SELECT cm_data_src_id FROM dt_special_data_sources
           ) THEN TRUE ELSE FALSE END AS needs_substr
    FROM DEV_NPF_DB.CDC_DIRECT.NPF_MDS_ACCOUNT_LOAD_AUD   ac_mds
    JOIN DEV_NPF_DB.CDC_DIRECT.NPF_MDS_LOAD_ACT_PART_AUD k
      ON ac_mds.n_mds_db = k.active_partition
    JOIN DEV_NPF_DB.CDC_DIRECT.NPF_MDS_NRN_ACC_SRC_SYS_MAP_AUD sys_map
      ON ac_mds.source_system_type = sys_map.mds_src_sys
     AND (
       sys_map.mds_prod_line = ac_mds.product_line
       OR (sys_map.mds_prod_line IS NULL AND ac_mds.product_line IS NULL)
     )
    WHERE ac_mds.account_status_type_value <> 'Purged'
  ),
  dt_user_prefs AS (
    SELECT
      ac2.AC_SK,
      MAX(CASE WHEN usr2.DFLT_RPTG_TYPE = 'PCS' THEN 1 ELSE 0 END) AS has_pcs
    FROM DEV_ANCHOR_ANALYTICS.WP_SRC.NPF_USER       usr2
    JOIN DEV_ANCHOR_ANALYTICS.WP_SRC.NPF_AC_CUST_USER ac2
      ON usr2.USER_SK = ac2.USER_SK
    WHERE ac2.CUST_SK = (SELECT cust_sk FROM params)
    GROUP BY ac2.AC_SK
  ),
  dt_account_attrs AS (
    SELECT
      a.ac_sk,
      MAX(b.attrb_id || '|' || b.attrb_desc) AS attrb_desc1
    FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_ac_attrb a
    JOIN DEV_ANCHOR_ANALYTICS.WP_SRC.npf_attribute b
      ON a.attrb_id = b.attrb_id
    WHERE b.cust_sk = (SELECT cust_sk FROM params)
      AND b.attrb_hdr_seq = 1
    GROUP BY a.ac_sk
  ),
  dt_account_access AS (
    SELECT DISTINCT AC_SK
      FROM DEV_ANCHOR_ANALYTICS.WP_SRC.NPF_AC_CUST_USER
     WHERE CUST_SK = (SELECT cust_sk FROM params)
  ),
  dt_decode_data AS (
    SELECT 
      d1.dcde_code AS curr_code,
      d1.dcde_desc AS curr_desc,
      d2.dcde_code AS liab_code,
      d2.dcde_desc AS liab_desc
    FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_decode d1
    LEFT JOIN DEV_ANCHOR_ANALYTICS.WP_SRC.npf_decode d2
      ON d2.dcde_type = 'LIABFLAG'
    WHERE d1.dcde_type = 'CURRDDLB'
  ),
  dt_decode_invobj AS (
    SELECT dcde_code AS inv_code, dcde_desc AS inv_desc
      FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_decode
     WHERE dcde_type = 'INVOBJ'
  ),
  dt_decode_pcrstyle AS (
    SELECT dcde_code AS inv_code, dcde_desc AS inv_desc
      FROM DEV_ANCHOR_ANALYTICS.WP_SRC.npf_decode
     WHERE dcde_type = 'PCRSTYLE'
  ),
  dt_account_data AS (
    SELECT
      ac.*,
      dt_base_ac.decoder_ac_sk,
      dt_base_ac.decoder_ac_id,
      actype.ac_type_desc,
      dtltype.dtl_ac_type_desc,
      dtltype.ac_type_grp_dcde,
      dtltype.prod_info_url_desc,
      src.ac_dtl_src_desc,
      src.extl_flg,
      alias.upd_ac_desc,
      alias.ac_alias,
      alias.cust_sk,
      acagr.lst_valn_date,
      acagr.ast_acq_date,
      acagr.ac_commt_amt,
      acagr.ac_fund_amt,
      acagr.aggr_ast_id,
      pi.indx_sk,
      pi.indx_desc,
      lnkd_ac.lnkd_ac_sk,
      lnkd_ac.lnkd_ac_id,
      lnkd_ac.lnkd_ac_desc,
      lnkd_ast.ast_short_desc,
      lnkd_ast.ast_long_desc,
      lnkd_ast.tnt_sec_id,
      lnkd_ast.iss_type,
      lnkd_ast.man_aggr_ast_id,
      lnkd_ast.vintage_yr,
      tx.cleaned_tx    AS raw_tx,
      tx.needs_substr,
      CASE WHEN aa.AC_SK IS NOT NULL THEN 1 ELSE 0 END AS has_access,
      up.has_pcs,
      attr.attrb_desc1,
      invobj.inv_desc  AS inv_desc_obj,
      pcrstyle.inv_desc AS inv_desc_pcr
    FROM dt_base_ac
    JOIN DEV_ANCHOR_ANALYTICS.WP_SRC.npf_account       ac    ON ac.ac_sk = dt_base_ac.base_ac_sk
    JOIN DEV_ANCHOR_ANALYTICS.WP_SRC.npf_cust_ac_alias alias ON alias.ac_sk = ac.ac_sk
      AND alias.cust_sk = (SELECT cust_sk FROM params)
    JOIN DEV_ANCHOR_ANALYTICS.WP_SRC.npf_ac_type       actype ON actype.ac_type = ac.ac_type
    JOIN DEV_ANCHor_ANALYTICS.WP_SRC.npf_dtl_ac_type   dtltype ON dtltype.dtl_ac_type = ac.dtl_ac_type
    JOIN DEV_ANCHor_ANALYTICS.WP_SRC.npf_data_src      src    ON src.data_src_id = ac.data_src_id
    LEFT JOIN DEV_WPA_ACCOUNTS_DB.CORE.npf_ac_aggregation acagr ON acagr.ac_sk = ac.ac_sk
    LEFT JOIN DEV_WPA_ACCOUNTS_DB.CORE.npf_perf_indx       pi    ON pi.indx_sk = (SELECT cust_sk FROM params)
    LEFT JOIN dt_lnkd_ac_info                                  lnkd_ac ON lnkd_ac.ac_sk = ac.ac_sk
    LEFT JOIN dt_lnkd_ast_info                                 lnkd_ast ON lnkd_ast.ac_sk = ac.ac_sk
    LEFT JOIN dt_tx_id_prep                                    tx      ON tx.i_src_sys = ac.cm_data_src_id
                                                           AND tx.i_nrn_ac  = ac.cm_ac_id
    LEFT JOIN dt_account_access                                aa      ON aa.AC_SK = ac.ac_sk
    LEFT JOIN dt_user_prefs                                    up      ON up.AC_SK = ac.ac_sk
    LEFT JOIN dt_account_attrs                                 attr    ON attr.ac_sk = ac.ac_sk
    LEFT JOIN dt_decode_invobj                                 invobj  ON invobj.inv_code = ac.inv_obj_dcde
    LEFT JOIN dt_decode_pcrstyle                               pcrstyle ON pcrstyle.inv_code = ac.inv_obj_dcde
  )

SELECT
  fd.ac_sk,
  fd.cust_sk,
  fd.user_sk,
  fd.ac_type_grp_dcde,
  fd.i_tx,
  fd.dsclmr_desc,
  fd.begin_date_c,
  fd.max_valn_date,
  fd.display_zero_valn,
  b.cur_out.*,
  ad.*,
  dd.curr_code,
  dd.curr_desc,
  dd.liab_code,
  dd.liab_desc
FROM final_dates     fd
LEFT JOIN balances   b  ON TRUE
LEFT JOIN dt_account_data ad ON ad.ac_sk = fd.ac_sk
LEFT JOIN dt_decode_data    dd ON dd.curr_code = ad.bse_curr_dcde
                            OR dd.liab_code = ad.liab_flag;
